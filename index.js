// Servidor do Uber Report

// Necess√°rio instalar as bibliotecas com npm install
var express = require("express");
var app = express();
var cors = require("cors");
var sqlite3 = require("sqlite3").verbose();
const bcrypt = require("bcrypt");
const saltRounds = 10; // 10 rodadas por salt
const jwt = require("jsonwebtoken");
var morgan = require("morgan"); // logs do servidor
require("dotenv").config(); // Carrega as vari√°veis de ambiente do arquivo .env

const SECRET_KEY = process.env.SECRET_KEY_JWT;

var port = process.env.PORT || 3002;
var CAMINHO_DB = "uberDB.db";

const { criptografar, descriptografar } = require("./criptografia"); // Importa as fun√ß√µes de criptografia

// Middleware
app.use(morgan("dev"));
app.use(cors());
app.use(express.urlencoded({ extended: true }));
app.use(express.json());
const { autenticarToken, logRequestBody } = require("./middleware"); // Importa o middleware de autentica√ß√£o
app.use(logRequestBody);
require("./tokenJwt")(app); // Importa e registra a rota de gera√ß√£o de token

// Banco de Dados

var db = new sqlite3.Database(CAMINHO_DB);

db.run(`CREATE TABLE IF NOT EXISTS users (
    idUser    INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL,
    nome      TEXT    NOT NULL,
    sobrenome TEXT    NOT NULL,
    email     TEXT    NOT NULL,
    cpf       INTEGER UNIQUE NOT NULL,
    senha     TEXT    NOT NULL,
    telefone  INTEGER NOT NULL,
    tipo      TEXT    NOT NULL,
    cnh       INTEGER NULL,
    validade  TEXT    NULL
)`);

db.run(`CREATE TABLE IF NOT EXISTS alertas (
  idAlerta         INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL,
  nomeAlerta       TEXT    NOT NULL,
  dataHoraAlerta   TEXT    NOT NULL,
  tipoAlerta       TEXT    NOT NULL,
  latitude         REAL    NOT NULL,
  longitude        REAL    NOT NULL,
  fk_idUser        INTEGER REFERENCES users (idUser) NOT NULL
)`);

// Valida√ß√µes dos alertas

const INTERVALO_CHECAGEM_MS = 5 * 60 * 1000; // Checa a cada 5 minutos

setInterval(() => {
  const agora = new Date();
  const limiteISO = new Date(agora.getTime() - 30 * 60000).toISOString();

  console.log("‚è≥ Verificando alertas antigos...");

  const sqlDelete = `DELETE FROM alertas WHERE dataHoraAlerta <= ?`;

  db.run(sqlDelete, [limiteISO], function (err) {
    if (err) {
      console.error("Erro ao deletar alertas antigos:", err.message);
    } else if (this.changes > 0) {
      console.log(
        `üóëÔ∏è ${this.changes} alerta(s) com mais de 30 minutos foram deletados.`
      );
    } else {
      console.log("‚úÖ Nenhum alerta antigo encontrado.");
    }
  });
}, INTERVALO_CHECAGEM_MS);

// Buscando usu√°rios

app.get("/users", autenticarToken, function (req, res) {
  db.all(`SELECT * FROM users`, [], (err, rows) => {
    if (err) {
      return res.status(500).send("Erro ao buscar usu√°rios: " + err);
    }

    // Retorna os dados diretamente sem descriptografar
    res.json(rows);
  });
});

// Buscando usu√°rio espec√≠fico
app.get("/users/:id", autenticarToken, function (req, res) {
  const idUser = req.params.id; // Pega o ID da URL

  db.get(`SELECT * FROM users WHERE idUser = ?`, [idUser], (err, row) => {
    if (err) {
      return res
        .status(500)
        .json({ error: "Erro ao buscar usu√°rio", details: err.message });
    }
    if (!row) {
      return res.status(404).json({ error: "Usu√°rio n√£o encontrado." });
    }

    // Criptografa os dados do usu√°rio antes de envi√°-los
    const usuarioCriptografado = {
      idUser: criptografar(row.idUser.toString()),
      nome: criptografar(row.nome),
      sobrenome: criptografar(row.sobrenome),
      email: criptografar(row.email),
      cpf: criptografar(row.cpf.toString()),
      telefone: criptografar(row.telefone.toString()),
      tipo: criptografar(row.tipo),
      cnh: row.cnh ? criptografar(row.cnh.toString()) : null,
      validade: row.validade ? criptografar(row.validade) : null,
    };

    res.json(usuarioCriptografado);
  });
});

// Rota para cria√ß√£o de usu√°rios

app.post("/users", async function (req, res) {
  console.log(`[LOG] Rota: POST /users`);
  console.log(
    `[LOG] Dados recebidos (criptografados):`,
    JSON.stringify(req.body, null, 2)
  );

  try {
    // Descriptografa os dados recebidos do front-end
    const nome = descriptografar(req.body.nome);
    const sobrenome = descriptografar(req.body.sobrenome);
    const email = descriptografar(req.body.email);
    const cpf = descriptografar(req.body.cpf);
    const senha = descriptografar(req.body.senha);
    const telefone = descriptografar(req.body.telefone);
    const tipo = req.body.tipo;
    const cnh = req.body.cnh ? descriptografar(req.body.cnh) : null;
    const validade = req.body.validade
      ? descriptografar(req.body.validade)
      : null;

    console.log(`[LOG] Dados descriptografados:`, {
      nome,
      sobrenome,
      email,
      cpf,
      senha,
      telefone,
      tipo,
      cnh,
      validade,
    });

    // Valida√ß√£o dos campos obrigat√≥rios
    if (!nome || !sobrenome || !email || !cpf || !senha || !telefone || !tipo) {
      console.warn(`[WARN] Campos obrigat√≥rios ausentes.`);
      return res
        .status(400)
        .send("Todos os campos obrigat√≥rios devem ser preenchidos.");
    }

    // Verifica se o CPF j√° existe no banco de dados
    const rows = await new Promise((resolve, reject) => {
      db.all(`SELECT * FROM users WHERE cpf = ?`, [cpf], (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });

    if (rows.length > 0) {
      console.warn(`[WARN] Usu√°rio com CPF ${cpf} j√° existe.`);
      return res.status(422).send("Usu√°rio com esse CPF j√° existe!");
    }

    // Criptografa a senha antes de armazenar no banco
    const hashSenha = await bcrypt.hash(senha, saltRounds);

    // Insere o usu√°rio no banco de dados
    const idUser = await new Promise((resolve, reject) => {
      const sqlInsert = `INSERT INTO users (nome, sobrenome, email, cpf, senha, telefone, tipo, cnh, validade) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`;
      db.run(
        sqlInsert,
        [
          nome,
          sobrenome,
          email,
          cpf,
          hashSenha,
          telefone,
          tipo,
          cnh || null,
          validade || null,
        ],
        function (err) {
          if (err) reject(err);
          else resolve(this.lastID); // Captura o ID do √∫ltimo registro inserido
        }
      );
    });

    console.log(`[LOG] Usu√°rio criado com sucesso! ID: ${idUser}`);
    res.status(201).json({ message: "Usu√°rio cadastrado!", idUser });
  } catch (err) {
    console.error(`[ERROR] Erro ao criar usu√°rio:`, err.message);
    res.status(500).json({ error: "Erro no servidor", details: err.message });
  }
});

// Rota para atualizar os dados de um usu√°rio

app.put("/users/:id", autenticarToken, async function (req, res) {
  const idUser = req.params.id; // Pega o ID da URL
  const { nome, sobrenome, email, cpf, senha, telefone, tipo, cnh, validade } =
    req.body;

  try {
    // Verifica se o usu√°rio existe
    const user = await new Promise((resolve, reject) => {
      const sqlBuscaUser = `SELECT * FROM users WHERE idUser = ?`;
      db.get(sqlBuscaUser, [idUser], (err, row) => {
        if (err) reject(err);
        else resolve(row);
      });
    });

    if (!user) {
      return res.status(404).json({ error: "Usu√°rio n√£o encontrado." });
    }

    // Criptografa os campos sens√≠veis apenas se forem enviados
    const hashSenha = senha ? await bcrypt.hash(senha, saltRounds) : user.senha;
    const hashCpf = cpf
      ? await bcrypt.hash(cpf.toString(), saltRounds)
      : user.cpf;
    const hashEmail = email ? await bcrypt.hash(email, saltRounds) : user.email;

    // Monta a query dinamicamente com os campos enviados
    const campos = [];
    const valores = [];

    if (nome) {
      campos.push("nome = ?");
      valores.push(nome);
    }
    if (sobrenome) {
      campos.push("sobrenome = ?");
      valores.push(sobrenome);
    }
    if (email) {
      campos.push("email = ?");
      valores.push(hashEmail);
    }
    if (cpf) {
      campos.push("cpf = ?");
      valores.push(hashCpf);
    }
    if (senha) {
      campos.push("senha = ?");
      valores.push(hashSenha);
    }
    if (telefone) {
      campos.push("telefone = ?");
      valores.push(telefone);
    }
    if (tipo) {
      campos.push("tipo = ?");
      valores.push(tipo);
    }
    if (cnh) {
      campos.push("cnh = ?");
      valores.push(cnh);
    }
    if (validade) {
      campos.push("validade = ?");
      valores.push(validade);
    }

    // Adiciona o ID do usu√°rio no final dos valores
    valores.push(idUser);

    // Atualiza o usu√°rio
    const sqlUpdate = `
        UPDATE users 
        SET ${campos.join(", ")} 
        WHERE idUser = ?
      `;
    await new Promise((resolve, reject) => {
      db.run(sqlUpdate, valores, function (err) {
        if (err) reject(err);
        else resolve();
      });
    });

    res.json({ message: "Usu√°rio atualizado com sucesso!" });
  } catch (err) {
    res
      .status(500)
      .json({ error: "Erro ao atualizar usu√°rio", details: err.message });
  }
});

// Rota para deletar um usu√°rio

app.delete("/users/:id", autenticarToken, async function (req, res) {
  const idUser = req.params.id; // Pega o ID da URL

  try {
    // Valida se o ID √© um n√∫mero
    if (isNaN(idUser)) {
      return res.status(400).json({ error: "ID do usu√°rio inv√°lido." });
    }

    // Verifica se o usu√°rio existe
    const user = await new Promise((resolve, reject) => {
      const sqlBuscaUser = `SELECT * FROM users WHERE idUser = ?`;
      db.get(sqlBuscaUser, [idUser], (err, row) => {
        if (err) reject(err);
        else resolve(row);
      });
    });

    if (!user) {
      return res.status(404).json({ error: "Usu√°rio n√£o encontrado." });
    }

    // Deleta o usu√°rio
    await new Promise((resolve, reject) => {
      const sqlDelete = `DELETE FROM users WHERE idUser = ?`;
      db.run(sqlDelete, [idUser], function (err) {
        if (err) reject(err);
        else resolve();
      });
    });

    res.json({ message: "Usu√°rio deletado com sucesso!" });
  } catch (err) {
    res
      .status(500)
      .json({ error: "Erro ao deletar usu√°rio", details: err.message });
  }
});

// Rotas para alertas

// Buscando alertas

app.get("/alertas", autenticarToken, function (req, res) {
  db.all(`SELECT * FROM alertas`, [], (err, rows) => {
    if (err) {
      return res
        .status(500)
        .json({ error: "Erro ao buscar alertas", details: err.message });
    }
    res.json(rows);
  });
});

// Buscando alertas espec√≠ficos

app.get("/alertas/:id", autenticarToken, function (req, res) {
  const idAlerta = req.params.id; // Pega o ID da URL

  db.get(`SELECT * FROM alertas WHERE idAlerta = ?`, [idAlerta], (err, row) => {
    if (err) {
      return res
        .status(500)
        .json({ error: "Erro ao buscar alerta", details: err.message });
    }
    if (!row) {
      return res.status(404).json({ error: "Alerta n√£o encontrado." });
    }
    res.json(row); // Retorna o alerta encontrado
  });
});

// Criando alertas

app.post("/alertas", autenticarToken, function (req, res) {
  var {
    nomeAlerta,
    dataHoraAlerta,
    tipoAlerta,
    latitude,
    longitude,
    fk_idUser,
  } = req.body;

  console.log("Recebendo solicita√ß√£o para criar alerta", req.body);

  // Valida√ß√£o dos campos obrigat√≥rios
  if (
    !nomeAlerta || // Clima adverso OU Acidentes OU Crimes
    !dataHoraAlerta ||
    !tipoAlerta || // Se clima (Alagamento, deslizamento, temporal) | Se acidentes (Carros, pedestres) | Se crimes (Assaltos, confrontos, arrast√£o)
    !latitude ||
    !longitude ||
    !fk_idUser
  ) {
    console.error("Erro: Campos obrigat√≥rios faltando", req.body);
    return res.status(400).json({ error: "Todos os campos s√£o obrigat√≥rios." });
  }

  // Valida√ß√£o se latitude e longitude s√£o n√∫meros
  if (isNaN(latitude) || isNaN(longitude)) {
    console.error("Erro: Latitude ou longitude n√£o s√£o n√∫meros", {
      latitude,
      longitude,
    });
    return res
      .status(400)
      .json({ error: "Latitude e longitude devem ser n√∫meros." });
  }

  console.log("Validando exist√™ncia do usu√°rio com ID:", fk_idUser);
  // Validando se o usu√°rio existe
  const sqlBuscaUser = `SELECT * FROM users WHERE idUser = ?`;
  db.get(sqlBuscaUser, [fk_idUser], (err, row) => {
    if (err) {
      console.error("Erro ao buscar usu√°rio no banco de dados", err.message);
      return res
        .status(500)
        .json({ error: "Erro ao buscar usu√°rio", details: err.message });
    }
    if (!row) {
      console.warn("Usu√°rio n√£o encontrado", fk_idUser);
      return res.status(404).json({ error: "Usu√°rio n√£o encontrado." });
    }

    console.log("Usu√°rio encontrado. Inserindo alerta...");
    // Inserindo o novo alerta
    const sqlInsert = `INSERT INTO alertas (nomeAlerta, dataHoraAlerta, tipoAlerta, latitude, longitude, fk_idUser) VALUES (?, ?, ?, ?, ?, ?)`;
    db.run(
      sqlInsert,
      [nomeAlerta, dataHoraAlerta, tipoAlerta, latitude, longitude, fk_idUser],
      function (err) {
        if (err) {
          console.error(
            "Erro ao inserir alerta no banco de dados",
            err.message
          );
          return res
            .status(500)
            .json({ error: "Erro ao criar alerta", details: err.message });
        }
        console.log("Alerta criado com sucesso! ID:", this.lastID);
        res.status(201).json({
          message: "Alerta criado com sucesso!",
          idAlerta: this.lastID,
        });
      }
    );
  });
});

// Rota para atualizar os dados de um alerta

app.put("/alertas/:id", autenticarToken, function (req, res) {
  const idAlerta = req.params.id; // Pega o ID da URL
  var {
    nomeAlerta,
    dataHoraAlerta,
    tipoAlerta,
    latitude,
    longitude,
    fk_idUser,
  } = req.body;

  // Valida√ß√£o dos campos obrigat√≥rios
  if (
    !nomeAlerta ||
    !dataHoraAlerta ||
    !tipoAlerta ||
    !latitude ||
    !longitude ||
    !fk_idUser
  ) {
    return res.status(400).json({ error: "Todos os campos s√£o obrigat√≥rios." });
  }

  // Valida√ß√£o de latitude e longitude para que sejam n√∫meros
  if (isNaN(latitude) || isNaN(longitude)) {
    return res
      .status(400)
      .json({ error: "Latitude e longitude devem ser n√∫meros." });
  }

  // Verifica se o alerta existe
  const sqlBuscaAlerta = `SELECT * FROM alertas WHERE idAlerta = ?`;
  db.get(sqlBuscaAlerta, [idAlerta], (err, row) => {
    if (err) {
      return res
        .status(500)
        .json({ error: "Erro ao buscar alerta", details: err.message });
    }
    if (!row) {
      return res.status(404).json({ error: "Alerta n√£o encontrado." });
    }

    // Verifica se o usu√°rio associado existe
    const sqlBuscaUser = `SELECT * FROM users WHERE idUser = ?`;
    db.get(sqlBuscaUser, [fk_idUser], (err, row) => {
      if (err) {
        return res
          .status(500)
          .json({ error: "Erro ao buscar usu√°rio", details: err.message });
      }
      if (!row) {
        return res.status(404).json({ error: "Usu√°rio n√£o encontrado." });
      }

      // Atualiza o alerta
      const sqlUpdate = `UPDATE alertas SET nome = ?, dataHora = ?, tipoAlerta = ?, latitude = ?, longitude = ?, fk_idUser = ? WHERE idAlerta = ?`;
      db.run(
        sqlUpdate,
        [
          nomeAlerta,
          dataHoraAlerta,
          tipoAlerta,
          latitude,
          longitude,
          fk_idUser,
          idAlerta,
        ],
        function (err) {
          if (err) {
            return res.status(500).json({
              error: "Erro ao atualizar alerta",
              details: err.message,
            });
          }
          res.json({ message: "Alerta atualizado com sucesso!" });
        }
      );
    });
  });
});

// Rota para deletar um alerta

app.delete("/alertas/:id", autenticarToken, function (req, res) {
  const idAlerta = req.params.id; // Pega o ID da URL

  // Verifica se o alerta existe
  const sqlBuscaAlerta = `SELECT * FROM alertas WHERE idAlerta = ?`;
  db.get(sqlBuscaAlerta, [idAlerta], (err, row) => {
    if (err) {
      return res
        .status(500)
        .json({ error: "Erro ao buscar alerta", details: err.message });
    }
    if (!row) {
      return res.status(404).json({ error: "Alerta n√£o encontrado." });
    }

    // Deleta o alerta
    const sqlDelete = `DELETE FROM alertas WHERE idAlerta = ?`;
    db.run(sqlDelete, [idAlerta], function (err) {
      if (err) {
        return res
          .status(500)
          .json({ error: "Erro ao deletar alerta", details: err.message });
      }
      res.json({ message: "Alerta deletado com sucesso!" });
    });
  });
});

// Rota de login do usu√°rio
app.post("/login", (req, res) => {
  console.log(`[LOG] Rota: POST /login`);
  console.log(
    `[LOG] Dados recebidos (criptografados):`,
    JSON.stringify(req.body, null, 2)
  );

  try {
    // Descriptografa os dados recebidos do front-end
    const email = descriptografar(req.body.email);
    const senha = descriptografar(req.body.senha);

    console.log(`[LOG] Dados descriptografados:`, { email, senha });

    // Valida√ß√£o dos campos obrigat√≥rios
    if (!email || !senha) {
      console.warn(`[WARN] Campos obrigat√≥rios ausentes.`);
      return res.status(400).json({ error: "Email e senha s√£o obrigat√≥rios." });
    }

    console.log(`[LOG] Buscando usu√°rio no banco de dados...`);
    const sqlBuscaUser = `SELECT * FROM users WHERE email = ?`;
    db.get(sqlBuscaUser, [email], (err, user) => {
      if (err) {
        console.error(`[ERROR] Erro ao buscar usu√°rio:`, err.message);
        return res
          .status(500)
          .json({ error: "Erro ao buscar usu√°rio", details: err.message });
      }

      if (!user) {
        console.warn(`[WARN] Usu√°rio com email ${email} n√£o encontrado.`);
        return res.status(404).json({ error: "Usu√°rio n√£o encontrado." });
      }

      console.log(`[LOG] Verificando a senha fornecida...`);
      bcrypt.compare(senha, user.senha, (err, isMatch) => {
        if (err) {
          console.error(`[ERROR] Erro ao verificar senha:`, err.message);
          return res
            .status(500)
            .json({ error: "Erro ao verificar senha", details: err.message });
        }
        if (!isMatch) {
          console.warn(`[WARN] Credenciais inv√°lidas para o email ${email}.`);
          return res.status(401).json({ error: "Credenciais inv√°lidas." });
        }

        console.log(`[LOG] Login realizado com sucesso! Gerando token JWT...`);
        // Gera o token JWT
        const token = jwt.sign({ idUser: user.idUser }, SECRET_KEY, {
          expiresIn: "60m", // Token expira em 1 hora
        });

        console.log(`[LOG] Login realizado com sucesso!`);
        res.json({
          message: "Login realizado com sucesso!",
          idUser: user.idUser,
          token,
        });
      });
    });
  } catch (err) {
    console.error(`[ERROR] Erro no processamento do login:`, err.message);
    res.status(500).json({ error: "Erro no servidor", details: err.message });
  }
});

// Outras rotas

// Get
app.get("/", function (req, res) {
  res.send("Ol√°! Vim do servidor!");
});

// Listen
app.listen(port, () => {
  console.log(`Servidor rodando na porta ${port}`);
});
